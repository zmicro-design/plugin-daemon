#!/bin/bash

daemon::create() {
  local name=$1
  local is_run_at_load=$2
  local command=${@:3}

  if [ "$name" = "" ] || [ "$command" = "" ]; then
    log::error "daemon service and command are required"
    exit 1
  fi

  if [ "$(daemon_is_service_exist $name)" = "true" ]; then
    local service_path=$(daemon_service::get_path $name)
    log::error "found daemon service(${name}), please it manual: ${service_path}"
    exit 1
  fi

  local service_name=$(daemon_get_service_name $name)
  local service_path=$(daemon_service::get_path $name)
  local service_log_path=$(daemon_get_service_log_path $name)
  sudo touch $service_path

  local script_path=$DAEMON_SERVICE_SCRIPT_DIR/$name

    # create script
  sudo tee $script_path >>/dev/null <<EOF
#!/bin/bash
export PATH=/usr/local/lib/zmicro/bin:\$PATH

# @TODO
# override tput
#   => fix tput: No value for $TERM and no -T specified

tput() {
  return
}

export -f tput

${command}
EOF
  sudo chmod +x $script_path

  # MacOS - Launch
  if [ "$(os::is_macos)" = "true" ]; then
    daemon::create_with_launch "$service_name" "$service_path" "$script_path" "$service_log_path"
    log::success "daemon serice ${name} created"
    return
  fi

  # Not Linux
  if [ "$(os::is_linux)" != "true" ]; then
    log::error "not support this OS"
    exit 1
  fi

  # Linux - Systemd
  if [ "$(os::has_command systemctl)" = "true" ]; then
    sudo systemctl status >> /dev/null 2>&1
    if [ "$?" = "0" ]; then
      daemon::create_with_systemd "$service_name" "$service_path" "$script_path" "$service_log_path"
      return
    fi
  fi

  # Linux - SysV
  if [ "$(os::has_command service)" = "true" ]; then
    sudo service --status-all >> /dev/null 2>&1
    if [ "$?" = "0" ]; then
      daemon::create_with_sysv "$service_name" "$service_path" "$script_path" "$service_log_path"
      return
    fi
  fi

  log::error "not support Linux Distribution $(uname -a)"
}

# daemon::create_with_launch create daemon service with launchctl in macOS
daemon::create_with_launch() {
  local service_name=$1
  local service_path=$2
  local script_path=$3
  local service_log_path=$4

  # create launchctl plist
  if [ "$is_run_at_load" = "true" ]; then
    sudo tee $service_path >>/dev/null <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Disabled</key>
    <false/>
    <key>Label</key>
    <string>${service_name}</string>
    <key>RunAtLoad</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
      <string>${script_path}</string>
    </array>
    <key>StandardErrorPath</key>
    <string>${service_log_path}</string>
    <key>StandardOutPath</key>
    <string>${service_log_path}</string>
    <key>UserName</key>
    <string>$(os::username)</string>
  </dict>
</plist>
EOF
  else
    sudo tee $service_path >>/dev/null <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Disabled</key>
    <false/>
    <key>Label</key>
    <string>${service_name}</string>
    <key>KeepAlive</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
      <string>${script_path}</string>
    </array>
    <key>StandardErrorPath</key>
    <string>${service_log_path}</string>
    <key>StandardOutPath</key>
    <string>${service_log_path}</string>
    <key>UserName</key>
    <string>$(os::username)</string>
  </dict>
</plist>
EOF
  fi

  # start
  # sudo launchctl enable $service_path
  sudo launchctl load $service_path
}

daemon::create_with_systemd() {
  local service_name=$1
  local service_path=$2
  local script_path=$3
  local service_log_path=$4

  sudo tee $service_path >>/dev/null <<EOF
[Unit]
Description=zmicro service - ${name}

[Service]
# EnvironmentFile=$HOME/.bashrc
Environment=ZMICRO_HOME=${ZMICRO_HOME}
# Environment=ZMICRO_BIN_PATH=${ZMICRO_BIN_PATH}
Environment=PATH=/usr/local/bin:${ZMICRO_HOME}/bin:${PATH}
ExecStart=${script_path}
ExecReload=/bin/kill -s HUP \$MAINPID
ExecStop=/bin/kill -s TERM \$MAINPID
Restart=always
RestartSec=5
Type=simple

[Install]
WantedBy=multi-user.target 
EOF

  sudo systemctl daemon-reload
  sudo systemctl start $service_name

  log::success "daemon serice ${name} created"
}

daemon::create_with_sysv() {
  local service_name=$1
  local service_path=$2
  local script_path=$3
  local service_log_path=$4

  sudo tee $service_path >>/dev/null <<EOF
# For RedHat and cousins:
# chkconfig: - 99 01
# description: zmicro service - ${name}
# processname: ${script_path}

### BEGIN INIT INFO
# Provides:          ${script_path}
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:  ${name}
# Description:       zmicro service - ${name}
### END INIT INFO

cmd="${script_path}"
#
name="${name}"
pid_file="/var/run/\$name.pid"
stdout_log="${service_log_path}"
stderr_log="${service_log_path}"

# load environment file
# @TODO

[ -e /etc/sysconfig/\$name ] && . /etc/sysconfig/\$name

get_pid() {
    cat "\$pid_file"
}

is_running() {
    [ -f "\$pid_file" ] && cat /proc/\$(get_pid)/stat > /dev/null 2>&1
}

case "\$1" in
    start)
        if is_running; then
            echo "already started"
        else
            echo "starting \$name"
            \$cmd >> "\$stdout_log" 2>> "\$stderr_log" &
            echo \$! > "\$pid_file"
            if ! is_running; then
                echo "unable to start, see \$stdout_log and \$stderr_log"
                exit 1
            fi
        fi
    ;;
    stop)
        if is_running; then
            echo -n "stopping \$name.."
            kill \$(get_pid)
            for i in \$(seq 1 10)
            do
                if ! is_running; then
                    break
                fi
                echo -n "."
                sleep 1
            done
            echo
            if is_running; then
                echo "not stopped; may still be shutting down or shutdown may have failed"
                exit 1
            else
                echo "stopped"
                if [ -f "\$pid_file" ]; then
                    rm "\$pid_file"
                fi
            fi
        else
            echo "not running"
        fi
    ;;
    restart)
        \$0 stop
        if is_running; then
            echo "unable to stop, will not attempt to start"
            exit 1
        fi
        \$0 start
    ;;
    status)
        if is_running; then
            echo "running"
        else
            echo "stopped"
            exit 1
        fi
    ;;
    *)
    echo "usage: \$0 {start|stop|restart|status}"
    exit 1
    ;;
esac
exit 0
EOF

  sudo chmod +x $service_path
  sudo ln -sf $service_path /etc/init.d/$name
  sudo service $name start

  log::success "daemon serice ${name} created"
}

export -f daemon::create

export -f daemon::create_with_launch
export -f daemon::create_with_systemd
export -f daemon::create_with_sysv
